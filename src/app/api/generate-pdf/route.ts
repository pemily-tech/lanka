import chromium from '@sparticuz/chromium-min';
import { type NextRequest, NextResponse } from 'next/server';
import puppeteer, { type Browser } from 'puppeteer';
import puppeteerCore, { type Browser as BrowserCore } from 'puppeteer-core';

export const dynamic = 'force-dynamic';
export const maxDuration = 60;

export async function GET(request: NextRequest) {
	try {
		const searchParams = request.nextUrl.searchParams;
		const generatedResumeID = searchParams.get('generated_resume_id');
		if (!generatedResumeID) {
			return NextResponse.json(
				{ error: 'Invalid request' },
				{ status: 400 }
			);
		}

		// ðŸ”§ Dummy HTML content
		const finalHTML = `
      <!DOCTYPE html>
      <html>
        <head>
          <meta charset="UTF-8">
          <title>Dummy Resume</title>
          <style>
            body { font-family: Arial, sans-serif; padding: 40px; }
            h1 { color: #333; }
            p { font-size: 16px; }
          </style>
        </head>
        <body>
          <h1>Dummy Resume for ID: ${generatedResumeID}</h1>
          <p>This is a sample PDF generated by Puppeteer in a Next.js API route.</p>
        </body>
      </html>
    `;

		const resumeTitle = `Resume-${generatedResumeID}`;

		let browser: Browser | BrowserCore;
		if (
			process.env.NODE_ENV === 'production' ||
			process.env.VERCEL_ENV === 'production'
		) {
			const executablePath = await chromium.executablePath(
				'https://github.com/Sparticuz/chromium/releases/download/v131.0.1/chromium-v131.0.1-pack.tar'
			);
			browser = await puppeteerCore.launch({
				executablePath,
				args: chromium.args,
				headless: chromium.headless,
				defaultViewport: chromium.defaultViewport,
			});
		} else {
			browser = await puppeteer.launch({
				headless: true,
				args: ['--no-sandbox', '--disable-setuid-sandbox'],
			});
		}

		const page = await browser.newPage();
		await page.setContent(finalHTML, {
			waitUntil: 'networkidle0',
		});

		const pdf = await page.pdf({
			format: 'A4',
			printBackground: true,
			margin: {
				top: '10px',
				right: '10px',
				bottom: '10px',
				left: '10px',
			},
		});

		await browser.close();

		return new NextResponse(pdf, {
			status: 200,
			headers: {
				'Content-Type': 'application/pdf',
				'Content-Disposition': `attachment; filename=${resumeTitle}.pdf`,
			},
		});
	} catch (error) {
		console.error('PDF generation error:', error);
		return NextResponse.json(
			{ message: 'Error generating PDF' },
			{ status: 500 }
		);
	}
}
